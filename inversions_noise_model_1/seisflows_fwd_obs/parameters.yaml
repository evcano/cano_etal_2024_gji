
# //////////////////////////////////////////////////////////////////////////////
#
#                        SeisFlows YAML Parameter File
#
# //////////////////////////////////////////////////////////////////////////////
#
# Modules correspond to the structure of the source code, and determine
# SeisFlows' behavior at runtime. Each module requires its own sub-parameters.
#
# .. rubric::
#   - Determine available options for modules by running:
#       > seisflows print modules
#   - Auto-fill with docstrings and default values (recommended) by running:
#       > seisflows configure
#   - Swap out module parameters for a configured parameter file by running:
#       > seisflows swap {module} {name} (e.g., seisflows swap solver specfem3d)
#   - To set values as NoneType, use: null
#   - To set values as infinity, use: inf
#
#                                    MODULES
#                                    ///////
# workflow (str):    The types and order of functions for running SeisFlows
# system (str):      Computer architecture of the system being used
# solver (str):      External numerical solver to use for waveform simulations
# preprocess (str):  Preprocessing schema for waveform data
# optimize (str):    Optimization algorithm for the inverse problem
# ==============================================================================
workflow: forward_fwani
system: ibex
solver: specfem2d
preprocess: null
optimize: gradient
# =============================================================================
#
#    Forward Workflow
#    ----------------
#    Defines foundational structure for Workflow module. When used standalone 
#    is in charge of running forward solver in parallel and (optionally) 
#    calculating data-synthetic misfit and adjoint sources.
#
#    Parameters
#    ----------
#    :type modules: list of module
#    :param modules: instantiated SeisFlows modules which should have been
#        generated by the function `seisflows.config.import_seisflows` with a
#        parameter file generated by seisflows.configure
#    :type data_case: str
#    :param data_case: How to address 'data' in the workflow, available options:
#        'data': real data will be provided by the user in
#        `path_data/{source_name}` in the same format that the solver will
#        produce synthetics (controlled by `solver.format`) OR
#        synthetic': 'data' will be generated as synthetic seismograms using
#        a target model provided in `path_model_true`. If None, workflow will
#        not attempt to generate data.
#    :type stop_after: str
#    :param stop_after: optional name of task in task list (use
#        `seisflows print tasks` to get task list for given workflow) to stop
#        workflow after, allowing user to prematurely stop a workflow to explore
#        intermediate results or debug.
#    :type export_traces: bool
#    :param export_traces: export all waveforms that are generated by the
#        external solver to `path_output`. If False, solver traces stored in
#        scratch may be discarded at any time in the workflow
#    :type export_residuals: bool
#    :param export_residuals: export all residuals (data-synthetic misfit) that
#        are generated by the external solver to `path_output`. If False,
#        residuals stored in scratch may be discarded at any time in the 
#        workflow
#
#        
#    Forward Noise Workflow
#    ----------------
#    Dummy
#
#    Parameters
#    ----------
#    :type dummy:
#    :param dummy
#
#        
# =============================================================================
data_case: synthetic
stop_after: null
export_traces: True
export_residuals: False
path_scratch_local: /local/scratch
# =============================================================================
#
#    Workstation System
#    ------------------
#    Defines foundational structure for System module. When used standalone,
#    runs solver tasks either in serial (if `nproc`==1; i.e., without MPI) or in
#    parallel (if `nproc`>1; i.e., with MPI). All other tasks are run in serial.
#
#    Parameters
#    ----------
#    :type ntask: int
#    :param ntask: number of individual tasks/events to run during workflow.
#        Must be <= the number of source files in `path_specfem_data`
#    :type nproc: int
#    :param nproc: number of processors to use for each simulation. Choose 1 for
#        serial simulations, and `nproc`>1 for parallel simulations.
#    :type mpiexec: str
#    :param mpiexec: MPI executable on system. Defaults to 'mpirun -n ${NPROC}'
#    :type log_level: str
#    :param log_level: logger level to pass to logging module.
#        Available: 'debug', 'info', 'warning', 'critical'
#    :type verbose: bool
#    :param verbose: if True, formats the log messages to include the file
#        name, line number and message type. Useful for debugging but
#        also very verbose.
#
#        
#    Cluster System
#    ------------------
#    Generic or common HPC/cluster interfacing commands
#
#    Parameters
#    ----------
#    :type title: str
#    :param title: The name used to submit jobs to the system, defaults
#        to the name of the current working directory
#    :type mpiexec: str
#    :param mpiexec: Function used to invoke executables on the system.
#        For example 'mpirun', 'mpiexec', 'srun', 'ibrun'
#    :type ntask_max: int
#    :param ntask_max: limit the number of concurrent tasks in a given array job
#    :type walltime: float
#    :param walltime: maximum job time in minutes for the master SeisFlows
#        job submitted to cluster. Fractions of minutes acceptable.
#    :type tasktime: float
#    :param tasktime: maximum job time in minutes for each job spawned by
#        the SeisFlows master job during a workflow. These include, e.g.,
#        running the forward solver, adjoint solver, smoother, kernel combiner.
#        All spawned tasks receive the same task time. Fractions of minutes
#        acceptable.
#    :type environs: str
#    :param environs: Optional environment variables to be provided in the
#        following format VAR1=var1,VAR2=var2... Will be set using
#        os.environs
#
#        
#    System Slurm
#    ------------
#    Interface for submitting and monitoring jobs on HPC systems running the 
#    Simple Linux Utility for Resource Management (SLURM) workload manager.
#
#    Parameters
#    ----------
#    :type slurm_args: str
#    :param slurm_args: Any (optional) additional SLURM arguments that will
#        be passed to the SBATCH scripts. Should be in the form:
#        '--key1=value1 --key2=value2"
#
#        
# =============================================================================
ntask: 58
nproc: 8
mpiexec: mpirun 
log_level: DEBUG
verbose: False
title: seisflows_fwd_obs
ntask_max: 58
walltime: 60
tasktime: 15
environs: 
slurm_args: 
partition: batch
submit_to: batch
acceptable_partitions: ['batch']
# =============================================================================
#
#    Solver SPECFEM
#    --------------
#    Defines foundational structure for Specfem-based solver module. 
#    Generalized SPECFEM interface to manipulate SPECFEM2D/3D/3D_GLOBE w/ Python
#
#    Parameters
#    ----------
#    :type syn_data_format: str
#    :param syn_data_format: data format for reading synthetic traces into memory.
#        Available: ['SU': seismic unix format, 'ASCII': human-readable ascii]
#    :type materials: str
#    :param materials: Material parameters used to define model. Available:
#        ['ELASTIC': Vp, Vs, 'ACOUSTIC': Vp, 'ISOTROPIC', 'ANISOTROPIC']
#    :type density: bool
#    :param density: How to treat density during inversion. If True, updates
#        density during inversion. If False, keeps it constant.
#        TODO allow density scaling during an inversion
#    :type attenuation: bool
#    :param attenuation: How to treat attenuation during inversion.
#        if True, turns on attenuation during forward simulations only. If
#        False, attenuation is always set to False. Requires underlying
#        attenution (Q_mu, Q_kappa) model
#    :type smooth_h: float
#    :param smooth_h: Gaussian half-width for horizontal smoothing in units
#        of meters. If 0., no smoothing applied. Only applicable for workflows:
#        ['migration', 'inversion'], ignored for 'forward' workflow.
#        SPECFEM3D_GLOBE only: if `smooth_type`=='laplacian' then this is just 
#        the X and Y extent of the applied smoothing
#    :type smooth_h: float
#    :param smooth_v: Gaussian half-width for vertical smoothing in units
#        of meters. Only applicable for workflows: ['migration', 'inversion'],
#        ignored for 'forward' workflow.
#        SPECFEM3D_GLOBE only: if `smooth_type`=='laplacian' then this is just 
#        the Z extent of the applied smoothing
#    :type components: str
#    :param components: components to search for synthetic data with. None by
#        default which uses a wildcard when searching for synthetics. If
#        provided, User only wants to use a subset of components generated by
#        SPECFEM. In that case, `components` should be string of letters such
#        as 'ZN' (for up and north components)
#    :type solver_io: str
#    :param solver_io: format of model/kernel/gradient files expected by the
#        numerical solver. Available: ['fortran_binary': default .bin files].
#        TODO: ['adios': ADIOS formatted files]
#    :type source_prefix: str
#    :param source_prefix: prefix of source/event/earthquake files. If None,
#        will attempt to guess based on the specific solver chosen.
#    :type mpiexec: str
#    :param mpiexec: MPI executable used to run parallel processes. Should also
#        be defined for the system module
#    :type noise_distribution: str
#    :param noise_distribution: Only for ambient noise simulations. How to treat
#        the noise source distribution. Available:
#        ['default': noise distribution coded in SPECFEM, 'external': reads
#        noise distribution from path_model_init, 'invert': fixes the velocity
#        model and inverts for the noise distribution]
#
#        
#    Solver SPECFEM2D
#    ----------------
#    SPECFEM2D-specific alterations to the base SPECFEM module
#
#    Parameters
#    ----------
#    :type source_prefix: str
#    :param source_prefix: Prefix of source files in path SPECFEM_DATA. Defaults
#        to 'SOURCE'
#    :type multiples: bool
#    :param multiples: set an absorbing top-boundary condition
#
#        
# =============================================================================
syn_data_format: ascii
materials: shear
density: False
attenuation: False
smooth_h: 0.0
smooth_v: 0.0
components: null
source_prefix: irec_main_noise
noise_distribution: external
multiples: False
# =============================================================================
#
#    Gradient Optimization
#    ---------------------
#    Defines foundational structure for Optimization module. Applies a 
#    gradient/steepest descent optimization algorithm.
#
#    Parameters
#    ----------
#    :type line_search_method: str
#    :param line_search_method: chosen line_search algorithm. Currently available
#        are 'bracket' and 'backtrack'. See seisflows.plugins.line_search
#        for all available options
#    :type preconditioner: str
#    :param preconditioner: algorithm for preconditioning gradients. Currently
#        available: 'diagonal'. Requires `path_preconditioner` to point to a
#        set of files that define the preconditioner, formatted the same as the
#        input model
#    :type step_count_max: int
#    :param step_count_max: maximum number of trial steps to perform during
#        the line search before a change in line search behavior is
#        considered, or a line search is considered to have failed.
#    :type step_len_init: float
#    :param step_len_init: initial line search step length guess, provided
#        as a fraction of current model parameters.
#    :type step_len_max: float
#    :param step_len_max: maximum allowable step length during the line
#        search. Set as a fraction of the current model parameters
#
#        
# =============================================================================
preconditioner: null
step_count_max: 10
step_len_init: 0.05
step_len_max: 0.5
line_search_method: bracket
# =============================================================================
#
#	 Paths
#	 -----
#    :type workdir: str
#    :param workdir: working directory in which to perform a SeisFlows workflow.
#        SeisFlows internal directory structure will be created here. Default cwd
#    :type path_output: str
#    :param path_output: path to directory used for permanent storage on disk.
#        Results and exported scratch files are saved here.
#    :type path_data: str
#    :param path_data: path to any externally stored data required by the solver
#    :type path_state_file: str
#    :param path_state_file: path to a text file used to track the current
#        status of a workflow (i.e., what functions have already been completed),
#        used for checkpointing and resuming workflows
#    :type path_model_init: str
#    :param path_model_init: path to the starting model used to calculate the
#        initial misfit. Must match the expected `solver_io` format.
#    :type path_model_true: str
#    :param path_model_true: path to a target model if `case`=='synthetic' and
#        a set of synthetic 'observations' are required for workflow.
#    :type path_eval_grad: str
#    :param path_eval_grad: scratch path to store files for gradient evaluation,
#        including models, kernels, gradient and residuals.
#        :type path_scratch_local: str
#    :param path_scratch_local: optional path to a directory where all solver
#        simulations will be carried
#        
#    :type path_output_log: str
#    :param path_output_log: path to a text file used to store the outputs of
#        the package wide logger, which are also written to stdout
#    :type path_par_file: str
#    :param path_par_file: path to parameter file which is used to instantiate
#        the package
#    :type path_log_files: str
#    :param path_log_files: path to a directory where individual log files are
#        saved whenever a number of parallel tasks are run on the system.
#                
#    :type path_data: str
#    :param path_data: path to any externally stored data required by the solver
#    :type path_specfem_bin: str
#    :param path_specfem_bin: path to SPECFEM bin/ directory which
#        contains binary executables for running SPECFEM
#    :type path_specfem_data: str
#    :param path_specfem_data: path to SPECFEM DATA/ directory which must
#        contain the CMTSOLUTION, STATIONS and Par_file files used for
#        running SPECFEM
#    :type path_specfem_noise: str
#    :param path_specfem_noise: path to SPECFEM NOISE_TOMOGRAPHY/ directory
#        which must contain S_squared, use_external_noise_distribution,
#        nu_main, and irec_main_noise files
#            
#    :type path_preconditioner: str
#    :param path_preconditioner: optional path to a set of preconditioner files
#        formatted the same as the input model (or output model of solver).
#        Required to exist and contain files if `preconditioner`==True
#        
# =============================================================================
path_workdir: .
path_scratch: scratch
path_eval_grad: scratch/eval_grad
path_output: output
path_model_init: model_init
path_model_true: null
path_state_file: sfstate.txt
path_data: null
path_par_file: parameters.yaml
path_log_files: logs
path_output_log: sflog.txt
path_specfem_bin: 
path_specfem_data: specfem2d/DATA
path_specfem_noise: specfem2d/NOISE_TOMOGRAPHY
path_preconditioner: null
